package goldrush

import goldrush.GoRandomContants._

import scala.util.Random

object GoRndSource {

  val rngLen = 607
  val rngTap = 273
  val rngMax: Long = 1L << 63L
  val rngMask: Long = rngMax - 1
  val int32max = (1 << 31) - 1

  // rngCooked used for seeding. See gen_cooked.go for details.

  def calcAndPrint[T](funcName: String)(f: () => T): T = {
//    println(funcName + " started")
    val res = f()
//    Thread.sleep(500)
//    println(funcName + s" ended, res: $res")
    res
  }

  type int32 = Int
  type int = Long
  type int64 = Long
  type uint32 = Long
  type uint64 = BigInt

  def checkedCast[T, K](l: T, f: T => K, casterT: T => BigInt, casterK: K => BigInt): K = {
    val res = f(l)
//    assert(casterT(l) == casterK(res), s"$l $res")
//    println(s"casted: ${l} to $res")
    res
  }

  def uint32ToBigInt: uint32 => BigInt = BigInt.apply

  def int(l: Long): int = checkedCast[Long, Int](l, _.toInt, BigInt.apply, BigInt.apply)
  def int(l: uint64): int = checkedCast[uint64, Int](l, _.intValue, identity, BigInt.apply)
//  def int32(l: Long): int32 = checkedCast[Long, Int](l, _.toInt, BigInt.apply, BigInt.apply)
  def int32(l: uint32): int32 = checkedCast[uint32, int32](l, _.toInt, uint32ToBigInt, BigInt.apply)
  def uint32(l: Int): uint32 = {
    val f = { r: Int => BigInt.apply(r) }
    checkedCast[Int, uint32](l, Integer.toUnsignedLong, BigInt.apply, uint32ToBigInt)
  }
  def int64(l: Long): int64 = l
  def int64(l: uint64): int64 =
    checkedCast[uint64, int64](l, _.longValue, identity, BigInt.apply)
  def uint64(input: Long): BigInt = calcAndPrint("uint64(l: Long)") { () =>
//    import java.math.BigInteger
//    val TWO_64 = BigInteger.ONE.shiftLeft(64)
//
//    def asUnsignedDecimalString(l: Long): String = {
//      var b = BigInteger.valueOf(l)
//      if (b.signum < 0) b = b.add(TWO_64)
//      b.toString
//    }
    import java.nio.ByteBuffer
    def longToBytes(x: Long) = {
      val buffer = ByteBuffer.allocate(java.lang.Long.BYTES)
      buffer.putLong(x)
      buffer.array
    }

    val l = BigInt.apply(longToBytes(input))
//    val r = asUnsignedDecimalString(input)
//    assert(l == BigInt.apply(r))
    l
  }

  class RngSource {
    var tap: int = 0L // index into vec
    var feed: int = 0L // index into vec
    var vec = Array.ofDim[int64](rngLen) // current feedback register
  }

  implicit class RngSourceExtension(rng: RngSource) {

    // Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
    def Int63(): int64 = calcAndPrint("Int63(): int64 - 72") { () =>
      int64(Uint64() & rngMask)
    }

    // Uint64 returns a non-negative pseudo-random 64-bit integer as an uint64.
    def Uint64(): uint64 = calcAndPrint("Uint64 - 77") { () =>
      rng.tap -= 1
      if (rng.tap < 0) {
        rng.tap += rngLen
      }

      rng.feed -= 1
      if (rng.feed < 0) {
        rng.feed += rngLen
      }

      var x = rng.vec.apply(int32(rng.feed)) + rng.vec(int32(rng.tap))
      rng.vec(int32(rng.feed)) = x
      uint64(x)
    }

    // Seed uses the provided seed value to initialize the generator to a deterministic state.
    def Seed(inputSeed: int64): Unit = calcAndPrint("def Seed(inputSeed: int64) - 94") { () =>
      var seed = inputSeed
      rng.tap = 0L
      rng.feed = rngLen - rngTap

      seed = seed % int32max
      if (seed < 0) {
        seed += int32max
      }
      if (seed == 0) {
        seed = 89482311L
      }

      var x = int32(seed)
      var i = -20
      while (i < rngLen) {
        x = seedrand(x)
        if (i >= 0) {
          var u: int64 = 0L
          u = int64(x) << 40
          x = seedrand(x)
          u ^= int64(x) << 20
          x = seedrand(x)
          u ^= int64(x)
          u ^= rngCooked(i)
          rng.vec(i) = u
        }
        i += 1
      }
    }

  }

  def panic(s: String) = throw new RuntimeException(s)

  // seed rng x[n+1] = 48271 * x[n] mod (2**31 - 1)
  def seedrand(inputX: int32): int32 = {
    var x = inputX
    val A = 48271
    val Q = 44488
    val R = 3399

    val hi = x / Q
    val lo = x % Q
    x = A * lo - R * hi
    if (x < 0) {
      x += int32max
    }
    x
  }

  def NewSource(seed: int64): RngSource = {
    var rng: RngSource = new RngSource()
    rng.Seed(seed)
    rng
  }

  case class Rand(src: RngSource)

  implicit class RadnomExtension(r: Rand) {

    def Int63(): int64 = calcAndPrint("Int63(): int64 - 156") { () =>
      return r.src.Int63()
    }

    def Int31(): int32 = calcAndPrint("Int31(): int32 - 160") { () =>
      return int32(r.Int63() >> 32)
    }

    def Int31n(n: int32): int32 = calcAndPrint("Int31n(n: int32)") { () =>
      if (n <= 0) {
        panic("invalid argument to Int31n")
      }
      if ((n & (n - 1)) == 0) { // n is power of two, can mask
        return r.Int31() & (n - 1)
      }
      var max = int32(((1L << 31L) - 1) - ((1L << 31L) % uint32(n)))
      var v = r.Int31()
      while (v > max) {
        v = r.Int31()
      }
      return v % n
    }

    def Int63n(n: int64): int64 = {
      println("Int63n")
      if (n <= 0) {
        panic("invalid argument to Int63n")
      }
      if ((n & (n - 1)) == 0) { // n is power of two, can mask
        return r.Int63() & (n - 1)
      }
      var max = int64((1 << 63) - 1 - (1 << 63) % uint64(n))
      var v = r.Int63()
      while (v > max) {
        v = r.Int63()
      }
      v % n
    }

    def Intn(n: int): int = calcAndPrint("Intn(n: int): int") { () =>
      if (n <= 0) {
        panic("invalid argument to Intn")
      }
      if (n <= (1 << 31) - 1) {
        return int(r.Int31n(int32(n)))
      }
      return int(r.Int63n(int64(n)))
    }
  }

  def main(args: Array[String]): Unit = {

//    val seed = 14L
//    val maxInt = 152342342L
//    val examplesSize = 1e1.toInt
//    val expectedRes = List(102491361, 75525983, 146720574, 58055300, 112370356, 14412802, 62218984, 150709925, 77779442, 135476700)

//    val rndSource = NewSource(seed)
//    val rnd = Rand(rndSource)

//    val begin = System.nanoTime()
//    val rnds = Seq.fill(examplesSize)(rnd.Intn(maxInt))
//    val rnds = Seq.fill(examplesSize)(Random.nextInt(maxInt.toInt))
//    val end = System.nanoTime()

//    println(rnds)

//    assert(expectedRes == rnds)
//    println(s"${(end - begin) / 1e6.toInt}ms for ${rnds.size} numbers")

//    val counter: Array[int32] = Array.fill(3501)(0)

//    Seq
//      .range(0, 1000)
//      .map { i =>
//        val rndSource = NewSource(i)
//        val rnd = Rand(rndSource)
//        val res = Set.fill(10)(rnd.Intn(3500L))
//        val res = Set.fill(100)(Random.nextInt(3500))
//        res.foreach{x => counter(int32(x)) += 1}
//        i -> res
//      }

//    counter.zipWithIndex.sortBy(_._1).reverse.map {case (el, i) => println(s"${i} ${el}")}
//      .groupBy { case (k, v) => v }
//      .mapValues(_.map(_._1))
//      .force
//      .filter(_._2.nonEmpty)

    val rndSource = NewSource(1102183371L)
    val rnd = Rand(rndSource)

    val maxXToPrint = 20
    val maxYToPrint = 20

    val sss = "1,22,4;2,23,7;10,26,2;4,31,4;5,27,10;8,31,8;4,35,5;6,34,6;10,37,1;10,37,6;9,34,9;10,41,3;4,40,7;2,44,2;4,48,5;2,48,6;7,47,8;6,47,9;2,51,3;10,3,8;10,4,8;0,5,10;4,12,4;2,13,10;1,20,4;3,21,2;5,16,5;5,90,1;9,90,4;6,94,2;2,93,8;7,95,7;9,96,1;5,96,6;5,97,8;9,98,10;2,78,4;8,79,7;2,86,1;9,79,9;7,82,2;10,82,5;5,58,4;6,56,6;10,57,9;4,60,5;4,61,8;7,63,3;5,61,8;10,66,1;3,70,4;4,74,7;5,75,4;6,71,6;0,117,4;5,113,10;10,115,3;7,99,1;2,100,7;1,107,3;3,104,6;6,106,1;2,123,3;5,123,2;7,128,3;8,130,6;7,136,5;10,136,1;3,137,6;3,138,8;2,142,9;9,142,9;5,156,4;2,162,3;4,144,3;8,143,1;0,145,9;2,149,2;6,165,3;5,167,2;3,173,8;9,170,7;10,171,8;10,175,5;10,173,10;3,191,4;10,188,8;9,190,8;4,193,2;4,196,1;10,209,3;8,211,7;1,215,3;10,213,7;6,215,7;9,215,5;7,216,8;2,198,4;5,202,4;7,208,1;9,225,1;9,221,7;5,222,10;6,177,7;2,182,10;8,181,8;7,184,9;6,186,6;8,235,4;0,234,7;9,237,9;7,240,8;4,263,1;2,257,9;8,263,7;0,272,2;1,274,3;8,270,3;7,272,5;10,272,4;6,271,10;6,245,3;2,242,7;8,245,1;6,245,7;10,242,6;2,252,2;7,249,6;9,247,7;9,282,4;3,277,10;5,285,9;1,301,7;7,301,8;3,290,8;8,290,3;5,288,9;10,288,9;0,296,5;2,294,10;4,319,6;5,321,7;3,326,3;3,326,8;1,344,1;4,344,2;3,346,3;5,347,2;4,352,7;4,357,1;1,357,4;10,359,6;6,362,8;0,367,6;4,312,2;0,367,8;10,377,4;2,380,6;4,381,10;7,383,7;3,331,6;3,334,7;7,340,5;6,422,2;10,424,2;1,423,9;2,398,1;3,403,7;2,406,8;3,441,1;2,430,8;2,429,10;3,444,4;3,444,6;3,444,9;4,448,5;6,444,10;9,447,1;2,446,10;9,410,1;9,410,4;4,415,3;0,415,6;0,389,2;0,388,5;1,392,5;8,394,4;10,390,10;2,466,4;8,462,4;2,468,2;10,464,9;2,472,5;7,467,5;0,480,5;3,479,4;4,482,3;10,481,4;9,486,1;5,493,1;7,452,5;7,459,3;2,457,9;0,510,2;5,513,1;10,516,3;5,516,7;1,495,7;9,501,1;8,500,7;6,502,8;3,521,3;6,521,3;6,520,4;7,519,9;2,525,9;4,539,6;5,540,9;3,546,3;10,542,8;10,543,8;10,544,2;10,547,7;4,529,10;10,537,1;10,538,2;10,537,9;5,584,7;0,589,3;4,591,6;10,591,3;2,579,2;7,574,10;4,581,6;3,554,7;1,550,10;7,553,3;6,550,9;8,551,9;0,557,7;0,568,7;10,564,10;7,568,1;1,571,7;1,607,9;5,608,8;2,610,5;5,615,8;1,619,6;4,618,8;2,621,7;7,622,9;0,595,4;1,597,8;3,596,10;10,596,6;0,604,9;3,602,8;5,603,4;9,602,4;0,636,4;5,632,4;6,637,9;10,652,2;4,658,10;6,659,7;1,660,1;0,665,4;7,669,1;1,641,1;1,638,7;9,646,1;7,671,3;1,679,1;7,678,4;5,678,9;9,678,10;4,693,9;5,700,5;10,702,5;8,684,6;6,687,1;0,691,6;5,688,3;9,689,6;10,692,4;6,727,10;3,733,8;8,734,5;6,705,4;6,736,9;7,708,3;4,713,8;7,710,5;7,710,9;8,712,9;4,741,8;10,738,5;3,744,4;9,737,9;4,745,7;0,746,10;9,743,7;7,747,3;3,759,2;2,765,6;3,767,4;6,768,7;0,717,8;7,748,5;0,750,8;5,758,3;5,753,8;3,784,2;7,781,10;3,788,6;10,790,3;4,789,8;10,793,4;8,792,5;2,797,1;2,800,7;7,799,7;8,802,6;9,806,2;4,813,1;9,809,8;4,770,1;1,771,6;1,772,4;6,770,8;8,771,6;8,773,7;8,777,3;7,780,6;2,817,5;1,820,6;8,819,5;10,819,5;9,823,7;2,848,3;2,852,2;4,847,7;3,848,10;1,862,8;0,862,8;4,861,8;8,859,5;0,866,8;8,864,8;1,843,5;5,882,2;9,882,8;10,880,10;0,890,2;4,890,1;1,886,8;1,889,6;5,872,5;4,879,9;10,875,7;2,892,7;4,893,7;10,891,7;1,899,2;2,826,2;2,828,8;10,831,9;3,936,4;2,939,4;3,939,8;2,943,9;4,945,8;6,915,6;10,914,1;1,918,5;8,914,9;4,921,5;7,922,9;9,909,1;3,906,8;8,910,7;9,912,7;4,947,6;3,947,10;4,948,8;1,956,1;10,946,10;10,951,7;6,954,8;7,955,6;4,968,1;5,968,2;2,974,4;6,970,8;6,973,8;1,965,6;2,964,7;5,963,2;3,966,8;5,966,9;7,982,4;10,981,3;7,981,8;10,986,8;1,928,6;1,926,7;9,927,3;6,927,9;1,930,3;1,933,6;10,1004,4;7,1003,9;6,1007,2;5,1010,6;10,1011,7;8,991,5;1,993,9;3,997,1;6,994,10;8,992,10;7,1000,6;2,1016,4;8,1014,1;5,1012,3;3,1022,8;10,1017,6;6,1022,4;6,1022,5;6,1017,10;0,1025,6;4,1030,3;5,1033,2;9,1029,9;9,1046,3;5,1047,7;2,1050,3;2,1050,5;2,1052,4;3,1051,7;3,1054,5;5,1052,8;7,1050,10;8,1053,8;9,1053,7;0,1056,4;0,1058,8;8,1058,6;4,1062,5;2,1065,4;4,1062,9;0,1091,3;1,1091,4;1,1092,8;1,1095,10;10,1096,8;10,1067,3;10,1071,5;6,1077,1;1,1074,8;2,1075,9;10,1076,3;2,1078,3;2,1083,2;10,1078,8;4,1088,3;0,1087,6;10,1086,2;5,1086,9;10,1084,10;0,1113,1;3,1111,3;4,1111,9;1,1121,3;9,1116,9;4,1136,1;6,1133,5;0,1139,4;1,1109,9;4,1155,9;6,1155,9;1,1165,3;6,1163,1;6,1158,10;10,1164,2;7,1145,1;3,1153,9;8,1151,5;10,1152,4;7,1122,9;7,1132,4;0,1167,2;5,1132,10;6,1170,3;4,1170,8;4,1174,9;8,1172,5;1,1180,4;6,1181,6;1,1185,3;0,1185,4;2,1185,6;10,1183,2;0,1182,8;3,1186,7;7,1187,2;2,1210,3;9,1211,3;3,1218,3;6,1219,3;1,1191,6;10,1190,4;0,1195,5;0,1193,6;10,1198,1;8,1207,3;10,1232,1;8,1207,9;8,1241,5;1,1221,1;1,1241,10;9,1231,6;1,1258,7;2,1255,10;2,1257,9;9,1255,4;9,1256,2;9,1254,6;7,1255,9;10,1263,8;1,1246,6;5,1246,3;1,1253,2;2,1246,10;2,1253,4;7,1249,3;4,1253,10;0,1269,1;4,1269,4;5,1266,7;6,1310,2;3,1316,1;5,1319,1;8,1317,10;9,1280,3;2,1284,6;6,1289,6;7,1292,4;7,1298,4;8,1302,2;1,1306,6;9,1303,3;5,1306,2;8,1308,1;1,1308,7;10,1306,2;4,1324,8;5,1320,4;8,1320,2;6,1320,9;1,1328,3;3,1329,7;3,1325,9;7,1328,4;8,1332,1;10,1336,3;8,1337,2;9,1336,9;7,1341,6;8,1381,1;7,1383,1;3,1383,6;9,1385,1;1,1354,2;0,1358,3;8,1359,4;3,1368,7;1,1366,10;1,1369,1;7,1365,8;9,1371,6;5,1373,6;2,1390,2;4,1390,5;0,1349,1;7,1343,8;8,1350,1;7,1352,8;2,1411,4;0,1410,7;2,1413,4;6,1416,2;1,1421,2;10,1416,9;8,1423,3;1,1421,8;4,1421,9;8,1428,1;9,1427,3;5,1428,5;2,1401,2;5,1404,1;6,1404,3;4,1431,1;0,1430,5;3,1434,8;6,1430,5;1,1435,3;6,1438,4;0,1454,6;4,1446,10;8,1452,2;6,1456,9;3,1460,4;10,1455,9;1,1464,8;1,1465,7;3,1466,7;0,1467,9;0,1467,10;6,1466,10;2,1468,9;9,1472,1;2,1473,9;2,1474,5;2,1477,3;3,1474,7;5,1475,5;2,1481,1;9,1474,8;9,1477,8;5,1484,3;7,1494,4;9,1494,4;3,1516,1;3,1508,10;8,1513,1;6,1512,5;4,1499,1;7,1498,10;2,1501,4;3,1501,2;10,1501,3;10,1504,1;2,1505,10;10,1502,8;1,1530,5;0,1531,5;8,1537,1;6,1533,9;1,1524,10;2,1553,2;0,1526,9;3,1560,6;5,1559,2;9,1557,5;10,1541,6;8,1547,8;2,1564,1;1,1563,6;0,1569,4;3,1567,2;3,1571,1;10,1569,3;5,1567,5;2,1571,9;7,1585,2;5,1588,1;5,1585,8;9,1584,7;1,1594,5;1,1594,8;8,1593,4;7,1589,6;9,1574,4;8,1575,8;3,1606,3;1,1616,1;5,1613,8;10,1597,5;8,1599,4;0,1601,6;0,1632,4;6,1630,1;10,1632,6;9,1619,3;8,1624,10;6,1640,8;1,1650,5;2,1655,4;2,1657,3;5,1656,1;10,1651,9;7,1656,4;9,1658,2;7,1660,6;3,1661,5;2,1663,8;9,1664,2;0,1666,1;6,1662,7;7,1667,3;8,1668,2;10,1667,8;10,1698,4;8,1697,6;0,1673,9;9,1678,1;7,1672,9;8,1677,6;6,1707,3;7,1680,8;3,1711,7;1,1715,10;9,1712,10;3,1724,3;1,1722,5;5,1724,8;6,1739,1;9,1738,1;1,1738,9;10,1741,8;4,1727,7;7,1730,2;2,1731,7;1,1731,7;6,1730,5;0,1734,2;2,1732,3;0,1685,9;2,1691,4;7,1690,5;8,1785,2;1,1784,7;8,1786,9;4,1792,7;5,1788,7;6,1791,2;8,1789,7;6,1791,9;3,1775,1;9,1777,1;8,1781,9;4,1753,5;7,1749,7;4,1754,4;3,1756,2;6,1757,8;8,1758,9;4,1761,4;6,1763,7;3,1770,1;4,1766,5;5,1769,1;5,1769,7;0,1795,3;1,1795,4;5,1796,6;3,1798,8;5,1802,3;1,1802,10;4,1803,10;8,1799,8;8,1805,1;2,1811,1;7,1806,10;8,1808,10;1,1812,5;10,1809,4;2,1840,3;5,1840,2;4,1815,6;8,1821,7;10,1825,6;0,1828,2;1,1830,1;0,1826,9;10,1828,8;6,1828,10;0,1874,6;9,1878,4;8,1878,4;6,1876,9;9,1877,8;1,1850,2;2,1848,6;6,1850,1;5,1851,2;9,1849,4;5,1851,10;8,1849,10;2,1862,7;9,1861,8;6,1868,2;6,1864,7;0,1889,9;4,1893,2;4,1898,4;2,1899,6;3,1900,4;3,1899,6;9,1899,5;0,1921,9;3,1940,1;1,1937,8;0,1942,2;4,1946,8;5,1943,10;1,1934,7;1,1928,9;7,1903,6;4,1907,10;8,1904,5;2,1913,2;0,1913,4;2,1913,6;0,1910,8;8,1912,4;2,1948,2;6,1947,1;4,1947,9;3,1952,5;9,1957,1;1,1955,6;0,1960,1;2,1962,7;9,1960,4;8,1959,7;2,1963,5;2,1965,7;7,1968,5;4,1969,2;2,1973,6;5,1977,1;10,1975,3;0,1975,8;4,1981,5;2,1984,6;0,1980,10;2,1986,6;10,1985,2;1,1995,2;6,1992,10;8,2025,3;5,2024,5;2,2030,7;1,2033,9;5,2030,7;2,2016,3;3,2018,3;7,2035,5;2,2041,3;3,2040,6;2,2043,7;5,2041,5;3,2040,10;7,2044,4;1,2010,5;10,2008,2;9,2058,7;0,2073,1;6,2063,10;7,2065,10;2,2076,10;9,2074,6;1,2053,2;6,2051,1;0,2052,9;8,2056,8;10,2055,8;7,2095,5;4,2080,1;2,2082,3;1,2080,8;7,2082,4;8,2082,3;6,2082,6;3,2087,7;9,2113,8;3,2121,5;5,2119,1;6,2117,5;7,2122,2;5,2118,8;8,2121,5;10,2120,8;8,2125,5;5,2124,8;4,2130,4;2,2133,5;9,2106,1;2,2147,4;9,2150,2;2,2155,7;7,2155,1;3,2151,10;10,2156,4;0,2162,1;2,2163,4;3,2164,2;6,2162,4;10,2167,5;1,2173,7;1,2134,2;0,2174,9;1,2134,4;3,2141,4;0,2142,4;10,2140,2;7,2143,2;0,2181,10;6,2182,6;3,2187,6;1,2224,10;2,2201,3;3,2205,3;2,2208,1;2,2207,2;3,2209,1;10,2203,9;6,2208,3;6,2206,7;2,2192,9;0,2198,5;1,2195,9;6,2236,5;7,2234,10;1,2239,4;2,2243,3;3,2242,3;10,2239,1;6,2243,4;8,2239,7;3,2213,4;4,2216,3;4,2214,9;2,2221,5;0,2257,2;4,2257,6;2,2259,7;7,2258,3;9,2259,1;2,2261,3;9,2258,9;7,2265,5;4,2267,8;2,2266,8;10,2268,7;0,2273,4;3,2275,4;7,2271,6;2,2247,2;4,2275,10;8,2246,4;1,2252,5;10,2254,7;10,2250,10;8,2301,4;9,2302,9;6,2306,7;0,2277,8;8,2278,7;9,2280,4;10,2278,8;9,2277,9;10,2280,7;0,2285,3;0,2287,4;2,2287,8;7,2284,5;2,2289,1;3,2291,9;8,2291,5;6,2292,9;8,2296,5;2,2314,1;10,2297,9;5,2311,3;7,2316,1;9,2316,1;6,2319,1;8,2318,10;0,2324,8;4,2324,9;9,2324,8;4,2326,3;0,2327,9;2,2328,7;4,2336,7;1,2334,10;9,2341,2;5,2332,10;8,2343,8;10,2343,9;8,2346,7;4,2360,4;2,2362,2;2,2357,9;8,2361,3;9,2359,7;9,2363,7;0,2374,9;6,2371,4;8,2398,1;3,2398,9;9,2407,1;2,2383,2;1,2380,10;6,2385,6;9,2382,9;1,2387,3;2,2394,3;10,2396,1;5,2393,6;0,2416,2;7,2416,5;7,2417,8;0,2436,8;1,2436,9;3,2437,6;6,2436,2;5,2457,5;2,2462,5;1,2460,10;10,2462,2;5,2461,9;2,2426,2;2,2422,9;4,2428,3;10,2429,3;5,2430,10;0,2449,1;1,2450,1;5,2442,8;6,2447,1;10,2449,5;8,2470,2;10,2474,3;8,2471,8;0,2479,3;0,2480,3;10,2478,10;4,2482,4;9,2484,6;2,2501,8;4,2504,3;10,2497,9;0,2507,5;5,2507,5;9,2507,4;8,2507,8;0,2486,4;0,2488,7;6,2489,8;6,2490,8;9,2486,8;7,2492,2;8,2541,2;10,2494,10;4,2547,2;9,2548,4;7,2546,10;5,2509,4;1,2517,1;10,2511,7;9,2515,1;9,2517,8;1,2533,10;2,2536,2;3,2533,10;9,2530,8;0,2538,2;3,2536,7;7,2539,7;6,2539,8;9,2519,4;10,2523,2;10,2520,6;8,2525,3;3,2529,9;9,2528,5;4,2564,7;10,2564,7;5,2570,5;1,2572,8;6,2571,4;3,2556,1;5,2569,9;6,2554,7;2,2559,1;10,2554,8;10,2559,2;6,2560,4;2,2597,8;5,2598,10;0,2605,3;4,2603,6;9,2606,1;1,2589,6;9,2588,6;2,2595,8;4,2594,7;8,2592,9;9,2577,7;6,2579,7;7,2610,3;5,2609,7;0,2607,9;4,2613,3;9,2612,10;10,2619,3;9,2613,10;9,2623,6;1,2633,7;1,2650,3;0,2645,10;1,2650,10;7,2650,10;5,2663,9;4,2672,2;10,2668,9;2,2652,6;8,2655,4;6,2655,7;4,2659,6;7,2684,10;5,2689,8;4,2673,8;4,2677,10;5,2675,9;8,2673,9;0,2681,5;3,2683,6;3,2678,8;6,2679,10;2,2708,7;6,2707,9;7,2708,6;10,2706,4;6,2709,8;2,2715,1;0,2713,7;9,2716,6;4,2696,2;10,2700,5;7,2719,6;0,2724,5;6,2722,1;10,2725,6;2,2728,9;4,2730,5;7,2735,2;9,2737,7;6,2754,8;7,2753,8;10,2754,8;3,2759,9;4,2742,2;9,2759,9;7,2741,7;3,2748,3;4,2746,10;4,2748,9;3,2778,6;8,2782,1;4,2779,5;10,2763,6;4,2770,4;4,2770,5;5,2766,4;7,2768,5;7,2769,4;9,2766,10;7,2797,4;10,2794,4;2,2783,1;4,2785,3;2,2793,2;6,2783,7;9,2789,1;10,2791,2;6,2805,8;4,2811,5;3,2812,4;7,2815,6;9,2811,9;8,2815,8;10,2813,9;8,2831,9;2,2834,8;3,2833,10;10,2837,7;5,2837,9;10,2836,9;4,2839,10;6,2840,10;2,2844,5;4,2843,9;8,2846,2;9,2843,5;10,2843,5;6,2843,7;4,2820,1;1,2826,9;6,2850,8;8,2853,10;10,2855,5;0,2885,3;10,2885,7;1,2887,8;3,2887,6;1,2888,9;3,2890,5;4,2889,9;2,2892,6;4,2872,7;10,2874,6;9,2871,9;1,2879,4;4,2877,6;1,2877,10;2,2877,9;5,2878,7;10,2876,9;5,2862,2;9,2863,3;5,2863,5;5,2860,6;0,2868,8;10,2869,10;6,2893,5;8,2896,3;5,2894,7;5,2897,6;3,2899,7;2,2904,1;5,2903,8;2,2908,4;6,2907,5;9,2905,8;6,2909,2;5,2911,4;4,2913,10;5,2909,10;9,2916,3;7,2916,8;1,2922,6;9,2925,6;0,2959,8;5,2967,2;6,2967,3;8,2966,9;1,2927,6;1,2936,4;7,2929,9;9,2931,4;4,2951,9;6,2950,7;6,2949,9;4,2955,5;4,2958,6;1,2939,3;9,2939,2;8,2941,4;1,2941,8;10,2947,4;0,2975,1;0,2970,10;0,3003,7;5,3004,6;5,3004,7;6,3008,8;7,3013,4;10,3009,10;1,2994,5;4,2996,3;2,2992,7;8,2999,3;8,2999,4;10,3001,2;7,3034,4;3,3033,10;5,3035,10;4,3016,6;9,3018,3;3,3018,10;1,3019,4;1,3037,2;0,3021,8;9,3036,1;0,3036,5;8,3038,5;2,3043,6;1,3046,6;9,3042,7;8,3045,5;1,3061,1;5,3059,4;4,3062,9;7,3062,9;10,3059,6;2,3063,3;10,3063,4;4,3068,9;8,3091,5;9,3094,8;0,3097,3;4,3098,6;10,3099,2;9,3099,2;9,3099,4;9,3096,8;1,3083,8;2,3089,4;9,3080,8;10,3073,2;5,3088,9;4,3077,3;9,3078,7;3,3048,10;7,3052,3;2,3052,8;1,3102,3;9,3102,7;10,3104,8;0,3110,1;4,3109,4;3,3113,1;4,3107,10;1,3119,10;9,3146,5;10,3149,7;6,3152,5;10,3149,10;6,3154,6;7,3156,4;2,3144,1;2,3136,10;5,3137,9;7,3142,4;5,3141,5;9,3141,5;8,3142,7;3,3127,1;4,3126,9;9,3124,7;0,3132,3;1,3133,2;3,3132,1;8,3133,10;2,3160,9;5,3157,8;4,3163,5;4,3167,5;10,3163,3;2,3183,1;0,3181,4;2,3179,7;0,3180,8;5,3188,5;0,3182,9;10,3193,9;2,3195,4;8,3197,4;3,3196,10;2,3171,8;4,3176,2;9,3169,7;1,3176,7;1,3178,7;4,3176,7;5,3212,5;3,3213,8;6,3217,5;10,3221,4;0,3202,4;2,3204,1;3,3201,6;5,3204,1;8,3202,1;9,3205,1;1,3210,8;2,3232,3;0,3256,3;0,3256,5;1,3258,6;10,3263,9;10,3262,7;2,3234,6;2,3238,4;6,3237,6;2,3243,3;5,3239,8;6,3245,2;9,3246,1;0,3249,8;1,3249,10;8,3249,7;8,3252,10;4,3267,10;1,3271,8;10,3270,6;4,3272,9;6,3276,5;3,3272,10;2,3291,4;9,3293,1;1,3291,5;5,3298,3;1,3294,10;7,3297,7;10,3282,1;9,3282,5;7,3279,8;4,3284,1;2,3287,4;5,3283,3;2,3288,9;6,3300,5;0,3310,2;1,3305,4;1,3310,7;8,3311,10;1,3321,7;5,3316,7;2,3331,2;5,3317,10;8,3317,9;9,3330,8;1,3337,3;10,3334,1;7,3335,5;3,3333,10;3,3340,3;0,3342,4;8,3335,10;6,3342,6;5,3359,7;0,3365,4;3,3363,10;1,3373,1;9,3370,7;7,3372,6;3,3376,10;9,3375,3;10,3374,9;3,3345,7;5,3344,2;0,3346,7;2,3347,6;10,3345,5;6,3349,5;0,3354,9;0,3392,9;5,3388,8;4,3379,2;6,3395,9;3,3384,3;6,3382,5;0,3403,3;6,3383,10;7,3401,4;7,3403,9;4,3404,5;6,3409,5;5,3411,9;10,3418,10;2,3433,7;6,3437,2;4,3438,8;8,3437,7;6,3439,10;9,3424,3;2,3424,9;3,3429,7;0,3431,10;0,3429,10;4,3450,9;2,3460,6;2,3462,7;3,3474,2;2,3475,10;4,3483,2;6,3476,7;1,3485,7;4,3486,7;5,3484,8;2,3499,6;8,3499,9;4,3490,9;8,3491,10;16,11,1;6,3496,8;11,2,4;12,8,3;18,5,1;17,24,5;16,25,8;20,22,8;13,27,5;19,32,5;19,32,9;14,36,2;13,34,9;17,34,3;14,41,3;21,37,10;21,41,2;12,55,7;13,58,4;11,64,3;21,57,8;15,63,5;15,64,5;18,48,2;18,53,1;16,50,8;13,69,1;12,69,6;20,69,2;15,76,1;15,76,9;17,72,9;20,76,9;12,79,7;17,85,6;16,84,7;17,89,1;16,89,6;19,89,7;20,92,7;15,94,4;19,94,1;19,98,5;12,113,2;12,116,8;17,117,3;11,117,9;20,120,5;16,116,10;13,100,3;18,102,9;12,109,7;15,107,8;18,105,7;21,108,6;21,129,5;13,154,1;15,158,1;13,156,4;11,155,9;17,158,2;21,156,3;12,162,9;18,164,1;17,159,10;18,134,2;11,133,9;13,138,4;11,140,6;20,139,5;13,146,7;17,147,7;19,147,10;15,149,7;14,152,6;19,149,3;21,149,7;16,148,10;16,167,7;15,172,5;15,176,1;12,179,1;19,171,10;17,178,6;20,179,5;17,186,2;14,181,8;20,186,8;19,184,10;13,188,2;20,187,1;13,190,7;12,196,2;19,192,1;19,189,9;21,194,3;17,195,1;15,195,8;20,193,10;20,196,8;14,203,3;16,221,2;18,221,1;14,203,7;18,221,4;20,220,4;16,209,9;11,216,1;18,209,9;21,210,7;11,231,1;15,236,10;20,239,9;17,264,7;17,266,7;18,271,1;19,265,8;19,267,10;21,270,9;12,255,8;12,254,10;15,253,8;20,254,9;19,255,8;12,262,5;20,262,7;21,244,1;14,246,6;20,251,2;20,243,9;21,244,10;17,277,4;15,279,9;15,281,10;19,284,10;15,293,2;17,294,7;15,309,8;18,312,6;21,318,2;12,318,10;21,317,7;17,299,3;21,300,8;12,307,4;16,304,2;11,341,8;15,346,6;11,349,10;18,347,7;20,332,2;16,330,8;17,334,6;18,337,2;19,332,8;20,340,4;21,356,4;13,358,1;13,359,2;13,361,1;16,360,1;12,320,1;20,362,9;19,328,3;15,329,9;19,329,3;16,327,6;17,374,6;20,379,1;19,379,3;18,375,10;21,381,9;20,363,5;11,371,5;20,363,10;18,373,5;20,364,10;17,388,6;11,395,3;19,392,5;20,394,7;11,397,6;14,404,1;12,396,9;13,404,8;21,402,6;12,407,5;18,415,3;17,413,6;15,413,10;15,418,8;14,423,7;19,425,1;15,423,10;14,426,9;21,423,6;19,430,2;19,432,1"

    val parsed = sss.split(";").toSeq.map(_.split(",").map(_.toLong)).map(x => (x(0), x(1), x(2)))

    val generated = Seq.fill(490_000)((rnd.Intn(3500L), rnd.Intn(3500L), rnd.Intn(10L) + 1))
    def sortAndPrint(s: Seq[(Long, Long, Long)]): Unit = {
      val filtered = s.filter { case (x, y, _) => x < maxXToPrint && y < maxYToPrint }
      println(filtered.sorted)
    }

    sortAndPrint(parsed)
    sortAndPrint(generated)

    assert(parsed.toSet.subsetOf(generated.toSet))

  }

}
